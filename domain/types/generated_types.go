// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package types

import (
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for EpisodeStatus.
const (
	EpisodeStatusActive         EpisodeStatus = "active"
	EpisodeStatusCancelled      EpisodeStatus = "cancelled"
	EpisodeStatusEnteredInError EpisodeStatus = "entered-in-error"
	EpisodeStatusFinished       EpisodeStatus = "finished"
	EpisodeStatusOnhold         EpisodeStatus = "onhold"
	EpisodeStatusPlanned        EpisodeStatus = "planned"
	EpisodeStatusWaitlist       EpisodeStatus = "waitlist"
)

// Defines values for FHIRTaskStatus.
const (
	FHIRTaskStatusAccepted   FHIRTaskStatus = "accepted"
	FHIRTaskStatusCancelled  FHIRTaskStatus = "cancelled"
	FHIRTaskStatusCompleted  FHIRTaskStatus = "completed"
	FHIRTaskStatusInProgress FHIRTaskStatus = "in-progress"
	FHIRTaskStatusOnHold     FHIRTaskStatus = "on-hold"
	FHIRTaskStatusRequested  FHIRTaskStatus = "requested"
)

// Defines values for Gender.
const (
	Female  Gender = "female"
	Male    Gender = "male"
	Other   Gender = "other"
	Unknown Gender = "unknown"
)

// Defines values for InboxEntryType.
const (
	InboxEntryTypeTransferRequest InboxEntryType = "transferRequest"
)

// Defines values for ProblemStatus.
const (
	Active   ProblemStatus = "active"
	Inactive ProblemStatus = "inactive"
)

// Defines values for TransferStatus.
const (
	Assigned  TransferStatus = "assigned"
	Cancelled TransferStatus = "cancelled"
	Completed TransferStatus = "completed"
	Created   TransferStatus = "created"
	Requested TransferStatus = "requested"
)

// BaseProps defines model for BaseProps.
type BaseProps struct {
	ObjectID string `json:"ObjectID"`
}

// CarePlan CarePlan as defined by https://decor.nictiz.nl/pub/eoverdracht/e-overdracht-html-20210510T093529/tr-2.16.840.1.113883.2.4.3.11.60.30.4.63-2021-01-27T000000.html#_2.16.840.1.113883.2.4.3.11.60.30.22.4.529_20210126000000
type CarePlan struct {
	PatientProblems []PatientProblem `json:"patientProblems"`
}

// Collaboration An object that represents the relation between an episode and a collaborator
type Collaboration struct {
	// EpisodeID An internal object UUID which can be used as unique identifier for entities.
	EpisodeID ObjectID `json:"episodeID"`

	// Id An internal object UUID which can be used as unique identifier for entities.
	Id *ObjectID `json:"id,omitempty"`

	// OrganizationDID The DID of the collaborator
	OrganizationDID string `json:"organizationDID"`

	// OrganizationName The name of the collaborator
	OrganizationName string `json:"organizationName"`
}

// CreateCollaborationRequest Request to create a collaboration.
type CreateCollaborationRequest struct {
	// Sender A care organization available through the Nuts Network to exchange information.
	Sender Organization `json:"sender"`
}

// CreateDossierRequest API request to create a dossier for a patient.
type CreateDossierRequest struct {
	Name string `json:"name"`

	// PatientID An internal object UUID which can be used as unique identifier for entities.
	PatientID ObjectID `json:"patientID"`
}

// CreateEpisodeRequest Request to create a episode.
type CreateEpisodeRequest struct {
	Diagnosis string `json:"diagnosis"`

	// DossierID An internal object UUID which can be used as unique identifier for entities.
	DossierID ObjectID `json:"dossierID"`
	Period    Period   `json:"period"`
}

// CreateTransferNegotiationRequest An request object to create a new transfer negotiation.
type CreateTransferNegotiationRequest struct {
	// OrganizationDID Decentralized Identifier of the organization to which transfer of a patient is requested.
	OrganizationDID string `json:"organizationDID"`

	// TransferDate Transfer date subject of the negotiation. Can be altered by both sending and receiving care organization.
	TransferDate openapi_types.Date `json:"transferDate"`
}

// CreateTransferRequest defines model for CreateTransferRequest.
type CreateTransferRequest struct {
	// CarePlan CarePlan as defined by https://decor.nictiz.nl/pub/eoverdracht/e-overdracht-html-20210510T093529/tr-2.16.840.1.113883.2.4.3.11.60.30.4.63-2021-01-27T000000.html#_2.16.840.1.113883.2.4.3.11.60.30.22.4.529_20210126000000
	CarePlan CarePlan `json:"carePlan"`

	// DossierID An internal object UUID which can be used as unique identifier for entities.
	DossierID ObjectID `json:"dossierID"`
	Patient   Patient  `json:"patient"`

	// TransferDate Transfer date as proposed by the sending XIS. It is populated/updated by the last negotiation that was started.
	TransferDate openapi_types.Date `json:"transferDate"`
}

// Customer A customer object.
type Customer struct {
	// Active If a VC has been issued for this customer.
	Active bool `json:"active"`

	// City Locality for this customer.
	City *string `json:"city,omitempty"`

	// Did The customer DID.
	Did *string `json:"did,omitempty"`

	// Domain The email domain of the care providers employees, required for logging in.
	Domain *string `json:"domain,omitempty"`

	// Id The internal customer ID.
	Id int `json:"id"`

	// Name Internal name for this customer.
	Name string `json:"name"`
}

// Dossier defines model for Dossier.
type Dossier struct {
	// Id An internal object UUID which can be used as unique identifier for entities.
	Id   ObjectID `json:"id"`
	Name string   `json:"name"`

	// PatientID An internal object UUID which can be used as unique identifier for entities.
	PatientID ObjectID `json:"patientID"`
}

// Episode A episode is a group of care organizations that share a common care plan.
type Episode struct {
	Diagnosis string `json:"diagnosis"`

	// Id An internal object UUID which can be used as unique identifier for entities.
	Id     ObjectID       `json:"id"`
	Period Period         `json:"period"`
	Status *EpisodeStatus `json:"status,omitempty"`
}

// EpisodeStatus defines model for Episode.Status.
type EpisodeStatus string

// FHIRTaskStatus Status of the negotiation, maps to FHIR eOverdracht task states (https://informatiestandaarden.nictiz.nl/wiki/vpk:V4.0_FHIR_eOverdracht#Using_Task_to_manage_the_workflow).
type FHIRTaskStatus string

// Gender Gender of the person according to https://www.hl7.org/fhir/valueset-administrative-gender.html.
type Gender string

// InboxEntry defines model for InboxEntry.
type InboxEntry struct {
	// Date Date/time of the entry.
	Date string `json:"date"`

	// RequiresAttention If true, this inbox entry requires attention of an end user (e.g. data has been changed by a remote system).
	RequiresAttention bool `json:"requiresAttention"`

	// ResourceID ID that should be used when retrieving the source document of the inbox entry, e.g. a transfer request.
	ResourceID string `json:"resourceID"`

	// Sender A care organization available through the Nuts Network to exchange information.
	Sender Organization `json:"sender"`

	// Status A valid transfer negotiation state.
	Status TransferNegotiationStatus `json:"status"`

	// Title Descriptive title.
	Title string `json:"title"`

	// Type Type of the entry
	Type InboxEntryType `json:"type"`
}

// InboxEntryType Type of the entry
type InboxEntryType string

// InboxInfo defines model for InboxInfo.
type InboxInfo struct {
	// MessageCount Number of new messages in the inbox.
	MessageCount int `json:"messageCount"`
}

// Intervention defines model for Intervention.
type Intervention struct {
	Comment string `json:"comment"`
}

// ObjectID An internal object UUID which can be used as unique identifier for entities.
type ObjectID = string

// Organization A care organization available through the Nuts Network to exchange information.
type Organization struct {
	// City City where the care organization is located.
	City string `json:"city"`

	// Did Decentralized Identifier which uniquely identifies the care organization on the Nuts Network.
	Did string `json:"did"`

	// Name Name of the care organization.
	Name string `json:"name"`
}

// PasswordAuthenticateRequest defines model for PasswordAuthenticateRequest.
type PasswordAuthenticateRequest struct {
	// CustomerID Internal ID of the customer for which is being logged in
	CustomerID int    `json:"customerID"`
	Password   string `json:"password"`
}

// Patient defines model for Patient.
type Patient struct {
	ObjectID  string  `json:"ObjectID"`
	AvatarUrl *string `json:"avatar_url,omitempty"`

	// Dob Date of birth.
	Dob *openapi_types.Date `json:"dob,omitempty"`

	// Email Primary email address.
	Email *openapi_types.Email `json:"email,omitempty"`

	// FirstName Given name
	FirstName string `json:"firstName"`

	// Gender Gender of the person according to https://www.hl7.org/fhir/valueset-administrative-gender.html.
	Gender Gender `json:"gender"`

	// Ssn Social security number
	Ssn *string `json:"ssn,omitempty"`

	// Surname Family name. Must include prefixes like "van der".
	Surname string `json:"surname"`

	// Zipcode The zipcode formatted in dutch form. Can be used to find local care providers.
	Zipcode string `json:"zipcode"`
}

// PatientProblem A problem as defined by https://decor.nictiz.nl/pub/eoverdracht/e-overdracht-html-20210510T093529/tr-2.16.840.1.113883.2.4.3.11.60.30.4.63-2021-01-27T000000.html#_2.16.840.1.113883.2.4.3.11.60.30.22.4.531_20210126000000
type PatientProblem struct {
	Interventions []Intervention `json:"interventions"`
	Problem       Problem        `json:"problem"`
}

// PatientProperties A patient in the EHR system. Containing the basic information about the like name, adress, dob etc.
type PatientProperties struct {
	AvatarUrl *string `json:"avatar_url,omitempty"`

	// Dob Date of birth.
	Dob *openapi_types.Date `json:"dob,omitempty"`

	// Email Primary email address.
	Email *openapi_types.Email `json:"email,omitempty"`

	// FirstName Given name
	FirstName string `json:"firstName"`

	// Gender Gender of the person according to https://www.hl7.org/fhir/valueset-administrative-gender.html.
	Gender Gender `json:"gender"`

	// Ssn Social security number
	Ssn *string `json:"ssn,omitempty"`

	// Surname Family name. Must include prefixes like "van der".
	Surname string `json:"surname"`

	// Zipcode The zipcode formatted in dutch form. Can be used to find local care providers.
	Zipcode string `json:"zipcode"`
}

// Period defines model for Period.
type Period struct {
	End   *openapi_types.Date `json:"end,omitempty"`
	Start *openapi_types.Date `json:"start,omitempty"`
}

// Problem defines model for Problem.
type Problem struct {
	Name   string        `json:"name"`
	Status ProblemStatus `json:"status"`
}

// ProblemStatus defines model for Problem.Status.
type ProblemStatus string

// Report defines model for Report.
type Report struct {
	// EpisodeID An internal object UUID which can be used as unique identifier for entities.
	EpisodeID   *ObjectID `json:"episodeID,omitempty"`
	EpisodeName *string   `json:"episodeName,omitempty"`

	// Id An internal object UUID which can be used as unique identifier for entities.
	Id ObjectID `json:"id"`

	// PatientID An internal object UUID which can be used as unique identifier for entities.
	PatientID ObjectID `json:"patientID"`
	Source    string   `json:"source"`
	Type      string   `json:"type"`
	Value     string   `json:"value"`
}

// SessionToken Result of a signing session.
type SessionToken struct {
	// Token the result from a signing session. It's an updated JWT.
	Token string `json:"token"`
}

// Transfer defines model for Transfer.
type Transfer struct {
	// CarePlan CarePlan as defined by https://decor.nictiz.nl/pub/eoverdracht/e-overdracht-html-20210510T093529/tr-2.16.840.1.113883.2.4.3.11.60.30.4.63-2021-01-27T000000.html#_2.16.840.1.113883.2.4.3.11.60.30.22.4.529_20210126000000
	CarePlan CarePlan `json:"carePlan"`

	// DossierID An internal object UUID which can be used as unique identifier for entities.
	DossierID ObjectID `json:"dossierID"`

	// FhirAdvanceNoticeComposition Reference to the FHIR composition resource that describes the advance notice, according to the Nictiz eOverdracht FHIR specification.
	FhirAdvanceNoticeComposition string `json:"fhirAdvanceNoticeComposition"`

	// FhirNursingHandoffComposition Reference to the FHIR composition resource that describes the nursing handoff, according to the Nictiz eOverdracht FHIR specification.
	FhirNursingHandoffComposition *string `json:"fhirNursingHandoffComposition,omitempty"`

	// Id An internal object UUID which can be used as unique identifier for entities.
	Id      ObjectID `json:"id"`
	Patient Patient  `json:"patient"`

	// Status Status of the transfer. If the state is "completed" or "cancelled" the transfer dossier becomes read-only. In that case no additional negotiations can be sent (for this transfer) or accepted. Possible values: - Created: the new transfer dossier is created, but no requests were sent (to receiving care organizations) yet. - Requested: one or more requests were sent to care organizations - Assigned: The transfer is assigned to one the receiving care organizations thet accepted the transfer. - Completed: the patient transfer is completed and marked as such by the receiving care organization. - Cancelled: the transfer is cancelled by the sending care organization.
	Status TransferStatus `json:"status"`

	// TransferDate Transfer date as proposed by the sending XIS. It is populated/updated by the last negotiation that was started.
	TransferDate openapi_types.Date `json:"transferDate"`
}

// TransferStatus Status of the transfer. If the state is "completed" or "cancelled" the transfer dossier becomes read-only. In that case no additional negotiations can be sent (for this transfer) or accepted. Possible values: - Created: the new transfer dossier is created, but no requests were sent (to receiving care organizations) yet. - Requested: one or more requests were sent to care organizations - Assigned: The transfer is assigned to one the receiving care organizations thet accepted the transfer. - Completed: the patient transfer is completed and marked as such by the receiving care organization. - Cancelled: the transfer is cancelled by the sending care organization.
type TransferStatus string

// TransferNegotiation defines model for TransferNegotiation.
type TransferNegotiation struct {
	// Id An internal object UUID which can be used as unique identifier for entities.
	Id ObjectID `json:"id"`

	// Organization A care organization available through the Nuts Network to exchange information.
	Organization Organization `json:"organization"`

	// OrganizationDID Decentralized Identifier of the organization to which transfer of a patient is requested.
	OrganizationDID string `json:"organizationDID"`

	// Status Status of the negotiation, maps to FHIR eOverdracht task states (https://informatiestandaarden.nictiz.nl/wiki/vpk:V4.0_FHIR_eOverdracht#Using_Task_to_manage_the_workflow).
	Status FHIRTaskStatus `json:"status"`

	// TaskID The id of the FHIR Task resource which tracks this negotiation.
	TaskID string `json:"taskID"`

	// TransferDate Transfer date subject of the negotiation. Can be altered by both sending and receiving care organization.
	TransferDate openapi_types.Date `json:"transferDate"`

	// TransferID An internal object UUID which can be used as unique identifier for entities.
	TransferID ObjectID `json:"transferID"`
}

// TransferNegotiationStatus A valid transfer negotiation state.
type TransferNegotiationStatus struct {
	// Status Status of the negotiation, maps to FHIR eOverdracht task states (https://informatiestandaarden.nictiz.nl/wiki/vpk:V4.0_FHIR_eOverdracht#Using_Task_to_manage_the_workflow).
	Status FHIRTaskStatus `json:"status"`
}

// TransferProperties Properties of a transfer. These values can be updated over time.
type TransferProperties struct {
	// CarePlan CarePlan as defined by https://decor.nictiz.nl/pub/eoverdracht/e-overdracht-html-20210510T093529/tr-2.16.840.1.113883.2.4.3.11.60.30.4.63-2021-01-27T000000.html#_2.16.840.1.113883.2.4.3.11.60.30.22.4.529_20210126000000
	CarePlan CarePlan `json:"carePlan"`
	Patient  Patient  `json:"patient"`

	// TransferDate Transfer date as proposed by the sending XIS. It is populated/updated by the last negotiation that was started.
	TransferDate openapi_types.Date `json:"transferDate"`
}

// TransferRequest Incoming request from another care organization to transfer a patient.
type TransferRequest struct {
	// AdvanceNotice Properties of a transfer. These values can be updated over time.
	AdvanceNotice TransferProperties `json:"advanceNotice"`

	// NursingHandoff Properties of a transfer. These values can be updated over time.
	NursingHandoff *TransferProperties `json:"nursingHandoff,omitempty"`

	// Sender A care organization available through the Nuts Network to exchange information.
	Sender Organization `json:"sender"`

	// Status State of the transfer request. Maps to FHIR task state.
	Status string `json:"status"`

	// TransferDate Requested transfer date.
	TransferDate *openapi_types.Date `json:"transferDate,omitempty"`
}

// WebAuthnAuthenticateRequest defines model for WebAuthnAuthenticateRequest.
type WebAuthnAuthenticateRequest struct {
	CredentialID string `json:"credentialID"`

	// CustomerID Internal ID of the customer for which is being logged in
	CustomerID int    `json:"customerID"`
	PublicKey  string `json:"publicKey"`
	UserID     string `json:"userID"`
}

// SearchOrganizationsParams defines parameters for SearchOrganizations.
type SearchOrganizationsParams struct {
	// Query Keyword for finding care organizations.
	Query string `form:"query" json:"query"`

	// DidServiceType Filters other care organizations on the Nuts Network on service, only returning care organizations have a service in their DID Document which' type matches the given didServiceType and not including your own. If not supplied, care organizations aren't filtered on service.
	DidServiceType *string `form:"didServiceType,omitempty" json:"didServiceType,omitempty"`
}

// GetPatientsParams defines parameters for GetPatients.
type GetPatientsParams struct {
	// Name Search patients by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetReportsParams defines parameters for GetReports.
type GetReportsParams struct {
	// EpisodeID The identifier of episode the report must be part of.
	EpisodeID *string `form:"episodeID,omitempty" json:"episodeID,omitempty"`
}

// GetPatientTransfersParams defines parameters for GetPatientTransfers.
type GetPatientTransfersParams struct {
	// PatientID The patient ID
	PatientID string `form:"patientID" json:"patientID"`
}

// SetCustomerJSONRequestBody defines body for SetCustomer for application/json ContentType.
type SetCustomerJSONRequestBody = Customer

// AuthenticateWithPasswordJSONRequestBody defines body for AuthenticateWithPassword for application/json ContentType.
type AuthenticateWithPasswordJSONRequestBody = PasswordAuthenticateRequest

// AuthenticateWithWebAuthnJSONRequestBody defines body for AuthenticateWithWebAuthn for application/json ContentType.
type AuthenticateWithWebAuthnJSONRequestBody = WebAuthnAuthenticateRequest

// CreateDossierJSONRequestBody defines body for CreateDossier for application/json ContentType.
type CreateDossierJSONRequestBody = CreateDossierRequest

// CreateEpisodeJSONRequestBody defines body for CreateEpisode for application/json ContentType.
type CreateEpisodeJSONRequestBody = CreateEpisodeRequest

// CreateCollaborationJSONRequestBody defines body for CreateCollaboration for application/json ContentType.
type CreateCollaborationJSONRequestBody = CreateCollaborationRequest

// UpdatePatientJSONRequestBody defines body for UpdatePatient for application/json ContentType.
type UpdatePatientJSONRequestBody = PatientProperties

// NewPatientJSONRequestBody defines body for NewPatient for application/json ContentType.
type NewPatientJSONRequestBody = PatientProperties

// CreateReportJSONRequestBody defines body for CreateReport for application/json ContentType.
type CreateReportJSONRequestBody = Report

// CreateTransferJSONRequestBody defines body for CreateTransfer for application/json ContentType.
type CreateTransferJSONRequestBody = CreateTransferRequest

// ChangeTransferRequestStateJSONRequestBody defines body for ChangeTransferRequestState for application/json ContentType.
type ChangeTransferRequestStateJSONRequestBody = TransferNegotiationStatus

// UpdateTransferJSONRequestBody defines body for UpdateTransfer for application/json ContentType.
type UpdateTransferJSONRequestBody = TransferProperties

// AssignTransferDirectJSONRequestBody defines body for AssignTransferDirect for application/json ContentType.
type AssignTransferDirectJSONRequestBody = CreateTransferNegotiationRequest

// StartTransferNegotiationJSONRequestBody defines body for StartTransferNegotiation for application/json ContentType.
type StartTransferNegotiationJSONRequestBody = CreateTransferNegotiationRequest

// UpdateTransferNegotiationStatusJSONRequestBody defines body for UpdateTransferNegotiationStatus for application/json ContentType.
type UpdateTransferNegotiationStatusJSONRequestBody = TransferNegotiationStatus
