const router = require('express').Router()
const config = require('../util/config')
const { auth } = require('../resources/nuts-node')

const patientResource = require('../resources/database').patient

// TODO: Find the sso endpoint by querying the Nuts registry
// TODO: fix the missing email attribute in the LoginContract
// TODO: Add a login screen
// TODO: Add a logout screen

router.get('/jump', findPatient, async (req, res) => {

  // // put here to speed up development process
  // let irmaToken = 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ1cm46b2lkOjIuMTYuODQwLjEuMTEzODgzLjIuNC42LjE6ODc2NTQzMjEiLCJzaWciOiJleUpBWTI5dWRHVjRkQ0k2SW1oMGRIQnpPaTh2YVhKdFlTNWhjSEF2YkdRdmMybG5ibUYwZFhKbEwzWXlJaXdpYzJsbmJtRjBkWEpsSWpwYmV5SmpJam9pUlZWdmEycDJaMVJoTUZGSWFXSllkRWxQTUcxMmNuY3pWSGRQYkhwMlJUZEhRU3RYYVVJd1ZHOWhkejBpTENKQklqb2ljQzgyVVhKTlNqbFZja3hvWVVwRVVqWm5ZMGRhZW1KV1ZWbDJPSHBHVEZaVWMzRlFiM2czYVZnMWMwOW5UaTg0U0ZwTVprZENRa3RrZG1sSVNFNVFVSGMwVm1WMVNYSTRTRE40YldkT2JGSmFSVlpWVlRVcmJFRXJUREZGYlRKSlFtUXhiRWN4VEZsSGVtOWpOMnR1UkRKelUwSjZkMEVyUTNCNllsTTNlVlYxSzA4d1dFUmpSU3RuUkV4UFJUSlVabTFZSzJKdGMweEVVMnhwV201aFpVMWFZM2xLZG5sMk4ySmpQU0lzSW1WZmNtVnpjRzl1YzJVaU9pSlFUbFF6V2xCTmJHTXlNbGMyUm1WU2IyeDFhbTVYVVdNeFpXTnNVWEUwYVRGUmNXczVhMmRzV1VadVRrdG5NV1oyWnpjd2NFRjNLMDUzYnpoNVlYSlFXa3AxVVZsR1lVUklVMGd3SWl3aWRsOXlaWE53YjI1elpTSTZJa05wVDBoUlZHeFFNV1UxWTJsdU5sVjJPRlp3TDJSaU56aFhjRVJpVGpGVWRESkJaVVJMV1RGNFZVZFlTakpuTmtWRFZXRkxLMWhKTTBkamJFOXNkUzh3YVhscFNGTjJkakExWkcxWGNYVm5hVXR4UzFsaVdsVnZRbEpIYmtWUllVUmFPVmRyY2pWQlpHSjVSbXQwYTNKeU0wWnpSWFZsYkhScmRqVjVTemxIYmxsTU5GSmhSMjFsVldGQmRWZ3ZRblI2YVhORVZXVnBNR1pFVFdwRmJVNDBiRGhzSzFKUVdWWlRhMnR3VTJjd1pFUm9ZMVJ5YTFGeVpIVkhXblpFZUZsMlJqZGxTMnQ1UzFGMFQwTklhbTB2Y3k5amIyUTNOMmR5WVRkamJXdFZlRGxrYlVsME9FcGlVWE5wWVRWc2RFRTRkRFIzU0RKcVlVNXlhRmNyZVRKWFQyTTRaamRSYlRNM09ETnBXR3hYWlZCWlRsQTBiMW94T0ZkaGIwbEhPRlZNY2tkNlpXUnZNR3B3Y1ZsM1RVOWxZMHg2TlhrMFlXWlNVMHRCU2xoNWNFa3hhV3h6UmpOU1ZYWkZhMnRaTlZKNE4yZ2lMQ0poWDNKbGMzQnZibk5sY3lJNmV5SXdJam9pS3k5WE1UVm1VMW80VG1RelZuVTJZWFYzVldGU1kwcFBOR1JJVm05c2EzSjRieTlhTmxoRmJrWXpNa2xNVTBGTUwyd3dOVU4yUlV3eFpFcENjekpUVm0xNVYycHFZbGc0Ym5GcmVHbDJjbTB6ZVcxWWIyUnljRTFWZVVONE5XSjRUQ3RqUFNJc0lqRXdJam9pV0c4MlRrWXdVRWRvUm5obmJVcHJiVlVyZUV3NU4wRmhVRGw0ZEVjdlluUm9NWE55VEc1VVNtWjRURWxIUm10NVdERjNhRmd4T0dwUmJsRk1WRlIxWVV4UFNYSldhbk5pUlhadFdrOXljRXh2U3psaVJtWmtibFowWVZGTlUxQk1kbEpWUFNJc0lqRXhJam9pVFdSamIxZGhhMGhyU21GVE1VSkVTRUZzY0hCaVNWbEhlRkZVVldWWk4wTXllV0ZNZVN0R2VEWmlVVTVVT0dneFNtbGxUbG8zTDBGQ2MwSndPVXhUT1ZCalFtUkhZa0pFVUdWb1UyRk5TSGhyV1VOM2FYSlpNMFV4YVZOM2NsUjFUM0JqUFNJc0lqRXlJam9pWjBWRlNtaG1TVGxoU1dOQ1VrMTVhSHBNY25WS1pXTTNja0o1ZFVGR01taEhaeXRyYjB4MFNtVkRjMmxpVVhoelVXTk9OVEZFT1ZvckwzWnNRa3hzVm5ONmExZEtXRzVOVEhGS1YzbHljM2hCU2pZNFFtYzVRbUZ4UW0xUU1qQmFhVmQzUFNJc0lqRXpJam9pVURRNGRUaFlVekJuV1hoUGNFcFlPVmd2UW5Fd1YxQXljbmQwUW1KRU1GZEtRMmhqVVZGWGNXTklOMWdyVG1Sb1pVaG9Uakl5VFV4UU1XUk9VbTFuYzNwSmRYUlpObXR2TTJkRk9HNU5aR1pGU0ZaeFNHNU5VeXRDVlVONWNGVjNXVVJaUFNJc0lqRTBJam9pVkV4NVN6QjRVVEpOVVV0RFNrVm5MemRHTm1wNVdHUlJTa1oyVGtWQ2JtODFZMUIzY3pGNWJYTmhRMWhVV0ZCNGNFbG1abmgwWTBadlpXOVdZWEZpYW5Bck1sRnNiMGt6VW1ST2NIUkJaM3BYWlVKUFVsZG5XalJKTUhnM1JXOVZNbXd3UFNJc0lqRTFJam9pYjJJNFQybDRWMXBvTXpoU2VrMXhVemREWVU5MlZ6aG5lRGxDVUc4NVowNDJXRzVoYkN0Qk1VeHZiMG95WW10UFYzUnlXR3gyTlZsNE5XNU1SQ3N4Um5RelRpdFFTRzV0YzJ4U1ZrTndSV3gwYjBOTVZVOHpha3c1Y0U5WVJYb3lWM2xaUFNJc0lqRTJJam9pYVZsMGNEVTVTSGcxUkhaeVF6VkJUMjU0ZDJKbVNua3pabVptTkZkMWVsTnBWbkpGZVVGb2FsQnJkblpFVlVsNVFVRTVjalpoVDFaQlRGVlVVMUYyY2pCeVpXaDJNR3BvU2tnNVozTk1ZVmRKYkRrNVYyUlNkekExVkRkQ1dFNUlSV1ZuUFNJc0lqRTNJam9pYms1dmRrRTJkVmhGVnpKRVJIWjRSVTVxUVdWUlIwbHlUamM1VTJobmVWUkROWFY2WWtsSldUQnlkeTlyU2xkUVIxVmphMU5NZVhKeE5FaFlMMGh1TjBZNVZteHBlalkxWVZsWWR6WTVLMGxHVEZSQlFqaHpOa1Z3YTNneVV5dHdNRWRCUFNJc0lqRTRJam9pYlRCSGFFbHliRkl4UjJSM1pVWmllbkJ1TXpsWlJ6Z3pkbFY1WWpsT2JVRktlVnB1VGpWaVQzaHVSMjlZUWxWc1QzVkZjR1Y2YVhGM09XaDBiVXhIYjBoM1lYTlVUbXBxSzNsV1QxVk5UelZJVVZBdlNYQTJWV0k1U1RVdk1UZE9iblpaUFNJc0lqRTVJam9pT1ROV1R6ZEpOSEJXTUZCcVJYQjFjV05XTUdwVGMweDNUWEpLWmxNMlZqRTBSblpEVmxadmREVmpUazRyUzNnMmJHVXpUMDFLTTNOeVlVOHZkMnA1UzFBMlkxVXlaalZFUmxGUVlUQjNSRVF5T1RCMkszcFFVWGR1VGxST1pHTnhibXBKUFNJc0lqSWlPaUk1UVRkblpFcHNSRlpLTjFwQ1FXRjVRVTkyYmxGUWJXNWlkbE51TjNKcWNXSXhOVWRyYXpsNVFXSlNkMlYyTjJwaVFXRlZlRXhvY21JNE9UQTBPV3RsZW5sMlRVcFRTbHBXTURkcmVrVklRMFZaUlc1VGJFbFJVRVp6ZEdKRE1GQkllVlU5SWl3aU55STZJalZsVldkYVprRnljVlZhWWtWNFowdHZiRTlNTjNZMGVWaFZVSGxsY0d0WVdFZFZabTVHVDFCTGFVTTNZamRyVkc0eFFsWnNVek5SV0hJMmRtNTBjMGxVZGxOT2NIbG5PWGx5UWpCUE5Ia3ZWbXQ0T0hkU1MzQTFhMjlIZUdKYU1VeHBPRDBpTENJNElqb2lNV1JaVUd0blRsVTBTMnMzWlROUVVXNXJVU3REYVhwWE0wUXJiVXB0TVd4eWRXVm5XVVpLSzNkVGNIaHVXSFpXVUZOUmVsSjFZWGhHVUVKVFRrNTBjM1J5Y1VGaU9UbDROME41UTBwUGREbHJhREZKZEU5bGJtSTJTMWxOWldNMU9WTkZQU0lzSWpraU9pSlpkRXAyZDBaTlNrUnBjR1IxZGl0bGFUZDVjMDVxSzFwSFUyeGxjMkpNV21KWVdUWlhMMWxWVjFORFNqUTBjM2xDVUZSS1UyOVZjVzFOTmxwb1oyMU1VMUpRVFUxNVpWWm5UMmhDWVhwNGRqUlVRVlJPVFhCdFRrSXpaR0pUTm1Gd2MxRTlJbjBzSW1GZlpHbHpZMnh2YzJWa0lqcDdJakVpT2lKQmQwRkxUMEZCWVVGQlJIcEZSRXRCZEhsRE9VVlBiV3Q2VUVkTFRXNVdPQ0lzSWpNaU9pSnlkRXhaTWsxeVYzbDNQVDBpTENJMElqb2llVTF6UFNJc0lqVWlPaUpvVDFSeE1IUlVaQ0lzSWpZaU9pSnlkRXhaTWsxeVYzbHJSRWw1YTBORk5VOXlVekZPTUQwaWZYMWRMQ0pwYm1ScFkyVnpJanBiVzNzaVkzSmxaQ0k2TUN3aVlYUjBjaUk2Tm4wc2V5SmpjbVZrSWpvd0xDSmhkSFJ5SWpvemZTeDdJbU55WldRaU9qQXNJbUYwZEhJaU9qUjlMSHNpWTNKbFpDSTZNQ3dpWVhSMGNpSTZOWDFkWFN3aWJtOXVZMlVpT2lJNFRucE5ka1ZwYWtNelQydGlVSEZJZFdWU2J6TkJQVDBpTENKamIyNTBaWGgwSWpvaVFWRTlQU0lzSW0xbGMzTmhaMlVpT2lKT1REcENaV2hoYm1SbGJHRmhja3h2WjJsdU9uWXhJRTl1WkdWeVoyVjBaV3RsYm1SbElHZGxaV1owSUhSdlpYTjBaVzF0YVc1bklHRmhiaUJFWlcxdklFVklVaUJ2YlNCdVlXMWxibk1nU0hWcGMyRnlkSE5sYm5CeVlXdDBhV3BySUU1dmIzUmxibUp2YjIwZ1pXNGdiMjVrWlhKblpYUmxhMlZ1WkdVZ2FHVjBJRTUxZEhNZ2JtVjBkMlZ5YXlCMFpTQmlaWFp5WVdkbGJpNGdSR1Y2WlNCMGIyVnpkR1Z0YldsdVp5QnBjeUJuWld4a2FXY2dkbUZ1SUdScGJuTmtZV2NzSURNZ2JXRmhjblFnTWpBeU1DQXdPVG8xT0Rvd01TQjBiM1FnWkdsdWMyUmhaeXdnTXlCdFlXRnlkQ0F5TURJd0lERXdPalU0T2pBeExpSXNJblJwYldWemRHRnRjQ0k2ZXlKVWFXMWxJam94TlRnek1qSTFPVEkyTENKVFpYSjJaWEpWY213aU9pSm9kSFJ3Y3pvdkwydGxlWE5vWVhKbExuQnlhWFpoWTNsaWVXUmxjMmxuYmk1bWIzVnVaR0YwYVc5dUwyRjBkVzFrTHlJc0lsTnBaeUk2ZXlKQmJHY2lPaUpsWkRJMU5URTVJaXdpUkdGMFlTSTZJaTh6U25KNVZrTnVURlpWYmtNdldISndVMnMzTkhORU5HWmhXbll3WkRaR1YydDNjbEF2WWtjMk1WbDBlbmRIU1ZnelZFazNSRVJ0UkVOd1V6TlFXbEpCVVVGWmVXNVdZMjVIV0ZOemFFUkhOVGhKUzBOQlBUMGlMQ0pRZFdKc2FXTkxaWGtpT2lKTlMyUlllRXA0UlZkUVVrbDNUbEEzVTNWMlVEQktMMDB2VGxZMU1WWmFkbkZEZVU4ck4yVkVkMG80UFNKOWZYMD0iLCJ0eXBlIjoiaXJtYSJ9.AAgB7gYQXdE4lhAgOUX4k4La6yp9wDT4frY4w7nzcDZAWOGzCmwLDHb5nxjIGkbgyxtIqzFDODNeWq55XWO2vN9KIXcFTiwv3tnIjyxk8wSVDHezFoGC3JxAp_uxyK1C2qSOelTkZQWHCzQFX9PNhd-CXcN4Fg_clEIkjSFMakgiDS2dUEa_oXYZCRGyyfasvqkogLcCUR8IC0AtLd3h-RtEhcYub3GFgIxR7uhuedKmVFgHJENA7luJUE7pStSXqiZpyHM4UaA4kCCM748RVzsuIgZQB_2AjbulzEv0u3XtwvmWKfsqFECMJ1Y9HeHE7nAr7R7wbiQmg7GvdXRRcw'
  // req.session.nuts_auth_token = irmaToken

  if (!req.session.nuts_auth_token) {
    res.redirect('/#irma-login')
  }

  // build context
  let context = {
    subject: `urn:oid:2.16.840.1.113883.2.4.6.3:${req.patient.bsn}`,
    actor: `urn:oid:2.16.840.1.113883.2.4.6.1:${config.organisation.agb}`,
    custodian: req.query.custodian,
    identity: req.session.nuts_auth_token,
    scope: 'nuts-sso'
  }
  console.log(context)

  // Get the JWT Bearer token at the local Nuts node
  let jwtBearerTokenResponse
  try {
    jwtBearerTokenResponse = await auth.createJwtBearerToken(context)
    console.log(jwtBearerTokenResponse)
  } catch (e) {
    console.log(e.response.data)
    res.status(500).send(`error while creating jwt bearer token: ${e.response.data}`)
  }

  // Get the access token at the custodians Nuts node
  let accessTokenResponse
  try {
    accessTokenResponse = await auth.createAccessToken('http://localhost:11323', jwtBearerTokenResponse.bearer_token)
    console.log(accessTokenResponse)
    // Make the jump!
    res.redirect(`http://localhost:80/sso/land?token=${accessTokenResponse.access_token}`)
  } catch (e) {
    if (e.response) {
      console.log(e.response.data)
      res.status(500).send(`error while creating access token: ${JSON.stringify(e.response.data)}`)
    } else {
      console.log(e)
      res.status(500).send(`error while creating access token: ${e}`)
    }
  }
})

router.get('/land', async (req, res) => {
  let accessToken = req.query.token
  if (!accessToken) {
    res.status(401).send('missing access token')
  }

  // Introspect the token at the local Nuts node
  let introspectionResponse = await auth.introspectAccessToken(accessToken)
  if (!introspectionResponse.active) {
    res.status(401).send('invalid token')
  }

  req.session.user = introspectionResponse.name

  // Get bsn from urn
  let patientBsn = introspectionResponse.sid.split(':').pop()
  let patient = await patientResource.byBSN(patientBsn)

  if (!patient) {
    res.status(401).send('patient not found')
  }

  res.redirect(`/#patient-details/${patient.id}`)
})

async function findPatient (req, res, next) {
  try {
    req.patient = await patientResource.byId(req.query.patient)
    next()
  } catch (e) {
    res.status(404).send(`Could not find a patient with id ${req.query.patient}: ${e}`)
  }
}

module.exports = router
