openapi: "3.0.0"
info:
  title: "Nuts Demo EHR API"
  version: "1.0.0"

paths:
  /auth:
    post:
      operationId: setCustomer
      description: sets the current customer ID in the JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        '200':
          description: A session was successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionToken"
        '403':
          description: Invalid credentials

  # Password authentication
  /auth/passwd:
    post:
      description: Authenticate using password credential. If successful an authenticated session is created and returned.
      operationId: authenticateWithPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordAuthenticateRequest"
      responses:
        '204':
          description: Authentication successful.
        '403':
          description: Invalid credentials
  # OpenID4VP authentication to self
  /auth/openid4vp:
    post:
      description: Create an OAuth2 authorize request. It returns a redirectURL.
      operationId: createAuthorizationRequest
      responses:
        '200':
          description: Request created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  redirect_uri:
                    type: string
                    description: The URL to redirect the user to.
                  session_id:
                    type: string
                    description: The session ID to use for the token request.
  /auth/openid4vp/{token}:
    parameters:
      - name: token
        in: path
        description: The session ID
        required: true
        schema:
          type: string
    get:
      description: |
        After a successful OAuth2 authorize request the resulting token can be fetched using his endpoint.
      operationId: getOpenID4VPAuthenticationResult
      responses:
        '200':
          description: Session result with access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"

  # IRMA authentication
  /auth/irma/session:
    post:
      description: Create an IRMA signing session.
      operationId: authenticateWithIRMA
      responses:
        '200':
          description: An IRMA signing session was successfully created
          content:
            application/json:
              schema:
                type: object
  /auth/irma/session/{sessionToken}/result:
    parameters:
      - name: sessionToken
        in: path
        description: IRMA session ID
        required: true
        schema:
          type: string
    get:
      description: |
        After a successful IRMA signing session the resulting signature can be fetched using his endpoint.
      operationId: getIRMAAuthenticationResult
      responses:
        '200':
          description: Session result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionToken"
  /auth/employeeid/session:
    post:
      description: Create an EmployeeID means signing session.
      operationId: authenticateWithEmployeeID
      responses:
        '200':
          description: An EmployeeID means signing session was successfully created
          content:
            application/json:
              schema:
                type: object
  /auth/employeeid/session/{sessionToken}/result:
    parameters:
      - name: sessionToken
        in: path
        description: EmployeeID means session ID
        required: true
        schema:
          type: string
    get:
      description: |
        After a successful EmployeeID means signing session the resulting signature can be fetched using his endpoint.
      operationId: getEmployeeIDAuthenticationResult
      responses:
        '200':
          description: Session result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionToken"
  /auth/dummy:
    post:
      description: Create a dummy signing session.
      operationId: authenticateWithDummy
      responses:
        '200':
          description: A Dummy signing session was succesfully created
          content:
            application/json:
              schema:
                type: object
  /auth/dummy/session/{sessionToken}/result:
    parameters:
      - name: sessionToken
        in: path
        description: Dummy session ID
        required: true
        schema:
          type: string
    get:
      description: |
        After a successful Dummy signing session the resulting token can be fetched using his endpoint.
      operationId: getDummyAuthenticationResult
      responses:
        '200':
          description: Session result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionToken"

  /private:
    get:
      description: Checks whether the current session is valid. If not, the client should authenticate before calling other API operations.
      operationId: checkSession
      responses:
        '204':
          description: The session is valid.
        '400':
          description: The session is invalid.

  /private/customer:
    get:
      operationId: getCustomer
      description: Get the information of the current customer based on the session
      responses:
        200:
          description: All the information of the current customer.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"

  /customers:
    get:
      operationId: listCustomers
      responses:
        200:
          description: returns a list of customers as configured in the customers.json file
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Customer"
  /private/patient/{patientID}:
    parameters:
      - name: patientID
        in: path
        description: The patient id
        required: true
        schema:
          type: string
    get:
      operationId: getPatient
      description: Get the patient by indicated by the patientID
      responses:
        200:
          description: The requested patient
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
    put:
      operationId: updatePatient
      description: Update the patient indicated by the patientID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatientProperties"
      responses:
        200:
          description: Update successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"

  /private/careplan:
    post:
      description: Create a Shared Care Plan
      operationId: createCarePlan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCarePlanRequest"
      responses:
        200:
          description: The created SharedCarePlan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SharedCarePlan"
    get:
      parameters:
        - name: patientID
          in: query
          description: The patient ID
          required: true
          schema:
            type: string
      description: Get all care plan dossiers for a patient
      operationId: getPatientCarePlans
      responses:
        200:
          description: Patient found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SharedCarePlan'
  /private/careplan/{dossierID}:
    parameters:
      - name: dossierID
        in: path
        description: Dossier ID of the CarePlan.
        required: true
        schema:
          type: string
    get:
      description: Get a care plan by dossier ID.
      operationId: getCarePlan
      responses:
        200:
          description: Care plan found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedCarePlan'
  /private/careplan/{dossierID}/activity:
    parameters:
      - name: dossierID
        in: path
        description: Dossier ID of the CarePlan.
        required: true
        schema:
          type: string
    post:
      description: Creates a new activity in the care plan.
      operationId: createCarePlanActivity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCarePlanActivityRequest'
      responses:
        200:
          description: Activity was added to the Care Plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedCarePlan'

  /private/episode:
    post:
      description: Create a episode
      operationId: createEpisode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEpisodeRequest"
      responses:
        200:
          description: The created episode
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Episode"
        404:
          description: The patient or the doctor does not exist

  /private/episode/{episodeID}:
    get:
      description: Get the episode by the episodeID
      operationId: getEpisode
      parameters:
        - name: episodeID
          in: path
          description: The episode ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: The requested episode
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Episode"
        404:
          description: The episode does not exist

  /private/episode/{episodeID}/collaboration:
    get:
      description: Get the collaboration of the episode by the episodeID
      operationId: getCollaboration
      parameters:
        - name: episodeID
          in: path
          description: The episode ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: The collaborations of the episode
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Collaboration"
        404:
          description: The episode does not exist
    post:
      description: Create a collaboration
      operationId: createCollaboration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCollaborationRequest"
      parameters:
        - name: episodeID
          in: path
          description: The episode ID
          required: true
          schema:
            type: string
      responses:
        201:
          description: The created collaboration
        404:
          description: The episode does not exist

  /private/transfer:
    post:
      description: Create a new patient transfer dossier.
      operationId: createTransfer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransferRequest'
      responses:
        200:
          description: Transfer created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        404:
          description: Patient not found
        400:
          description: Invalid request.
    get:
      parameters:
        - name: patientID
          in: query
          description: The patient ID
          required: true
          schema:
            type: string
      description: Get all transfer dossiers for a patient
      operationId: getPatientTransfers
      responses:
        200:
          description: Transfer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        404:
          description: Transfer not found
  /private/transfer/{transferID}:
    parameters:
      - name: transferID
        in: path
        description: ID of the transfer dossier.
        required: true
        schema:
          type: string
    get:
      description: Get a transfer by ID.
      operationId: getTransfer
      responses:
        200:
          description: Transfer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        404:
          description: Transfer not found
    put:
      description: Update the transfer.
      operationId: updateTransfer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferProperties'
      responses:
        200:
          description: Transfer updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        404:
          description: Transfer not found
    delete:
      description: Cancel a transfer and all its negotiations.
      operationId: cancelTransfer
      responses:
        200:
          description: Transfer cancelled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'

  /private/transfer/{transferID}/assign:
    parameters:
      - name: transferID
        in: path
        description: ID of the transfer dossier.
        required: true
        schema:
          type: string
    put:
      description: >
        Assign the transfer of a patient to a care organization that accepted the transfer negotiation.
        Calling this operation will update the state of the negotiation to "inProgress" and the transfer to "assigned".
      operationId: assignTransferDirect
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransferNegotiationRequest'
      responses:
        204:
          description: Transfer accepted.
        404:
          description: Transfer or negotiation not found
        400:
          description: Invalid request.
  /private/transfer/{transferID}/negotiation:
    parameters:
      - name: transferID
        in: path
        description: ID of the transfer dossier.
        required: true
        schema:
          type: string
    get:
      description: Lists all negotiations for this transfer.
      operationId: listTransferNegotiations
      responses:
        200:
          description: Negotiation started.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransferNegotiation'
    post:
      description: >
        Start a negotiation with a care organization for this transfer.
        Calling this operation will update the state of the transfer to "requested".
      operationId: startTransferNegotiation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransferNegotiationRequest'
      responses:
        200:
          description: Negotiation started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferNegotiation'
        404:
          description: Patient or transfer not found
        400:
          description: Invalid request.
  /private/transfer/{transferID}/negotiation/{negotiationID}:
    parameters:
      - name: transferID
        in: path
        description: ID of the transfer dossier.
        required: true
        schema:
          type: string
      - name: negotiationID
        in: path
        description: ID of the transfer negotiation.
        required: true
        schema:
          type: string
    put:
      description: >
        Update this negotiation status. Performed by sending party to either cancel or accept a negotiation.
      operationId: updateTransferNegotiationStatus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferNegotiationStatus'
      responses:
        200:
          description: Negotiation status updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferNegotiation'
        404:
          description: transfer or negotiation not found.
        400:
          description: Invalid request. State transition might be illegal.

  /private/transfer-request/{requestorDID}/{fhirTaskID}:
    parameters:
      - name: requestorDID
        in: path
        description: DID of the care organizaton that requests the transfer.
        required: true
        schema:
          type: string
      - name: fhirTaskID
        in: path
        description: ID of the FHIR transfer task at the care organization that requests the transfer.
        required: true
        schema:
          type: string
    get:
      operationId: getTransferRequest
      description: Get the details of a transfer request sent by another care organization.
      responses:
        200:
          description: Transfer request found and returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferRequest"
    post:
      operationId: changeTransferRequestState
      description: >
        Change the state of the transfer request [accept, cancel, complete].
        This call is made from the inbox by the receiving organization.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferNegotiationStatus"
      responses:
        204:
          description: Transfer request state change has been accepted.

  /private/patients:
    get:
      parameters:
        - name: name
          in: query
          description: Search patients by name
          required: false
          schema:
            type: string
      operationId: getPatients
      responses:
        200:
          description: A list of patients for the current customer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Patient"
    post:
      operationId: newPatient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatientProperties"
      responses:
        200:
          description: Succesful creation of a new Patient
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"

  /private/network/discovery:
    # Search has become a POST instead of GET, since it uses an object (query) as input,
    # which OpenAPI Codegenerator does not handle properly for GET operations.
    post:
      description: Searches for other care organizations on Nuts Network.
      operationId: searchOrganizations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: object
                  additionalProperties:
                    type: string
                  description: >
                    The search query, key-value string properties. E.g.:
                    'credentialSubject.organization.name: Ziekenhuis'
                discoveryServiceID:
                  description: >
                    Filters other care organizations on the Nuts Network, only returning care organizations that registered for the given Discovery Service.
                    It false, it will search on all Discovery Services.
                  type: string
                didServiceType:
                  description: >
                    Filters other care organizations on the Nuts Network on service, only returning care organizations have a service in their DID Document which' type matches the given didServiceType and not including your own.
                    If not supplied, care organizations aren't filtered on service.
                  type: string
                excludeOwn:
                  description: >
                    If true, the current care organization is excluded from the search results.
                    Defaults to false.
                  type: boolean
      responses:
        200:
          description: Search successful.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: object

  /private/network/patient:
    parameters:
      - name: patientSSN
        in: query
        description: The patient's SSN
        required: true
        schema:
          type: string
      - name: remotePartyDID
        in: query
        description: The DID of the remote party.
        required: true
        schema:
          type: string
      - name: scope
        in: query
        description: The OAuth2 scope to request.
        required: true
        schema:
          type: string
    get:
      description: Load the medical records of a patient at a remote XIS.
      operationId: getRemotePatient
      responses:
        200:
          description: The patient's medical records from the remote XIS.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemotePatientFile"


  /private/network/inbox:
    get:
      description: Returns the contents of the inbox.
      operationId: getInbox
      responses:
        200:
          description: Inbox returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InboxEntry"


  /private/network/inbox/info:
    get:
      description: Returns info about the current state of the inbox (message count).
      operationId: getInboxInfo
      responses:
        200:
          description: Inbox info returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InboxInfo"

  /private/reports/{patientID}:
    parameters:
      - name: patientID
        in: path
        description: The patient ID
        required: true
        schema:
          type: string
    get:
      parameters:
        - name: episodeID
          in: query
          description: The identifier of episode the report must be part of.
          required: false
          schema:
            type: string
      description: Get list of reports for a patient
      operationId: getReports
      responses:
        200:
          description: The list of reports for the patient
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Report"

    post:
      description: Create a new record for a patient
      operationId: createReport
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Report"
      responses:
        204:
          description: The creation of the new report is completed
  /private/dossier/{patientID}:
    get:
      description: Get list of dossiers for a patient
      operationId: getDossier
      parameters:
        - name: patientID
          in: path
          description: The patient ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: The list of dossiers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Dossier"

  /private/dossier:
    post:
      description: Create a new dossier for a patient
      operationId: createDossier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDossierRequest"
      responses:
        200:
          description: The newly created dossier.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dossier"

  /external/careplan/notify:
    post:
      description: >
        Call this endpoint to notify the EHR of a FHIR Task that was assigned to the care organization,
        added to a Shared Care Plan.
      operationId: notifyCarePlanUpdate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SharedCarePlanNotifyRequest"
      responses:
        200:
          description: Notification accepted


  /external/transfer/notify/{taskID}:
    post:
      description: >
        Call this endpoint to notify the app of an update for one of its customers, indicating that an eOverdracht FHIR task was update or created.
        The customer is identified by the access-token.
      operationId: notifyTransferUpdate
      parameters:
        - name: taskID
          in: path
          description: The task ID
          required: true
          schema:
            type: string
      responses:
        204:
          description: Notification processed successfully.

  /internal/acl/{tenantDID}/{authorizedDID}:
    parameters:
      - name: tenantDID
        in: path
        description: The DID of the tenant who owns the resources
        required: true
        content:
          plain/text:
            schema:
              type: string
              example: did:web:example.com
      - name: authorizedDID
        in: path
        description: The DID of the authorized party
        required: true
        content:
          plain/text:
            schema:
              type: string
              example: did:web:example.com
    get:
      description: |
        Get all resource/operation combinations the authorized party was granted access to by the tenant.
        
        When a collaboration is initiated in the application, it registers the related FHIR resources on the ACL.
        The Policy Decision Point (PDP) can then use this ACL to make authorization decisions.
        An example consumer of this endpoint is Open Policy Agent using http.send()
      operationId: getACL
      responses:
        200:
          description: The ACL for the tenant and authorized party
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
  /internal/customer/{customerID}/task/{taskID}:
    parameters:
      - name: customerID
        in: path
        description: ID of the customer.
        required: true
        schema:
          type: integer
      - name: taskID
        in: path
        description: ID of the task.
        required: true
        schema:
          type: string
    put:
      description: >
        This endpoint acts as a proxy for updating the Task resource. Internal checks have to be done first before updating.
        After updating, a notification has to be send. If the status == "completed" then also the NutsAuthorizationCredential needs to be revoked.
      operationId: taskUpdate
      responses:
        200:
          description: Task updated successfully. It returns the task as it was submitted.

components:
  schemas:
    Customer:
      type: object
      description: A customer object.
      required:
        - id
        - name
        - active
      properties:
        id:
          type: integer
          description: The internal customer ID.
          example: 1
        did:
          type: string
          description: The customer DID.
          example:
            "did:nuts:123"
        ura:
          type: string
          description: The URA of the customer.
        name:
          type: string
          description: Internal name for this customer.
        city:
          type: string
          description: Locality for this customer.
        domain:
          type: string
          description: The email domain of the care providers employees, required for logging in.
        active:
          type: boolean
          description: If a VC has been issued for this customer.
    Collaboration:
      description: An object that represents the relation between an episode and a collaborator
      type: object
      required:
        - episodeID
        - organizationDID
        - organizationName
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        episodeID:
          $ref: '#/components/schemas/ObjectID'
        organizationDID:
          type: string
          description: The DID of the collaborator
        organizationName:
          type: string
          description: The name of the collaborator
    BaseProps:
      type: object
      required:
        - ObjectID
      properties:
        ObjectID:
          type: string
    ObjectID:
      description: An internal object UUID which can be used as unique identifier for entities.
      type: string
      example:
        - 665d6390-4823-4829-a3bf-4257e0b6799
      pattern: "/^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i"
    Patient:
      allOf:
        - $ref: "#/components/schemas/BaseProps"
        - $ref: "#/components/schemas/PatientProperties"
    PatientProperties:
      type: object
      description: |
        A patient in the EHR system. Containing the basic information about the like name, adress, dob etc.
      required:
        - firstName
        - surname
        - gender
        - zipcode
      properties:
        ssn:
          description: Social security number
          type: string
          example: 99999880
        firstName:
          description: Given name
          type: string
          example: Jan
        surname:
          description: Family name. Must include prefixes like "van der".
          type: string
          example: van der Moolen
        gender:
          $ref: "#/components/schemas/Gender"
        dob:
          description: Date of birth.
          type: string
          format: date
          example: "1986-01-30"
        zipcode:
          description: The zipcode formatted in dutch form. Can be used to find local care providers.
          type: string
          example: 7511AB
        email:
          description: Primary email address.
          type: string
          format: email
        avatar_url:
          type: string
    Gender:
      description: Gender of the person according to https://www.hl7.org/fhir/valueset-administrative-gender.html.
      type: string
      enum: [ male, female, other, unknown ]
      default: unknown
    SessionToken:
      type: object
      description: Result of a signing session.
      required:
        - token
      properties:
        token:
          type: string
          description: the result from a signing session. It's an updated JWT.
    TokenResponse:
      type: object
      description: |
        Token Responses are made as defined in (RFC6749)[https://datatracker.ietf.org/doc/html/rfc6749#section-5.1]
      required:
        - access_token
        - token_type
      properties:
        access_token:
          type: string
          description: |
            The access token issued by the authorization server.
          example: "eyJhbGciOiJSUzI1NiIsInR5cCI6Ikp..sHQ"
        token_type:
          type: string
          description: |
            The type of the token issued as described in [RFC6749].
          example: "bearer"
        scope:
          type: string
        status:
          type: string
          description: |
            The status of the access token request. Can be 'pending' or 'active'.
            If the status is 'pending', the access token is not yet available.
            Only used when the access token is requested through /request-user-access-token.
          enum: [ pending, active ]
        expires_in:
          type: integer
          description: |
            The lifetime in seconds of the access token.
          example: 3600
      example:
        {
          "access_token": "eyJhbGciOiJSUzI1NiIsInR5cCI6Ikp..sHQ",
          "token_type": "bearer",
          "expires_in": 3600,
        }
    PasswordAuthenticateRequest:
      required:
        - customerID
        - password
      properties:
        customerID:
          description: Internal ID of the customer for which is being logged in
          type: integer
          example: 1
        password:
          type: string
    Organization:
      description: A care organization available through the Nuts Network to exchange information.
      required:
        - name
        - city
        - did
        - discoveryServices
        - identifiers
      properties:
        name:
          description: Name of the care organization.
          type: string
        city:
          description: City where the care organization is located.
          type: string
        did:
          description: Decentralized Identifier which uniquely identifies the care organization on the Nuts Network.
          type: string
        discoveryServices:
          description: >
            List of Discovery Services the care organization is registered with.
          type: array
          items:
            type: string
        identifiers:
          description: >
            List of identifiers of the care organization.
          type: object
          additionalProperties:
              type: string
    CreateTransferNegotiationRequest:
      description: An request object to create a new transfer negotiation.
      type: object
      required:
        - organizationDID
        - transferDate
      properties:
        organizationDID:
          description: Decentralized Identifier of the organization to which transfer of a patient is requested.
          type: string
        transferDate:
          description: Transfer date subject of the negotiation. Can be altered by both sending and receiving care organization.
          type: string
          format: date
    TransferNegotiationStatus:
      description: A valid transfer negotiation state.
      type: object
      required:
        - status
      properties:
        status:
          $ref: "#/components/schemas/FHIRTaskStatus"
    FHIRTaskStatus:
      description: Status of the negotiation, maps to FHIR eOverdracht task states (https://informatiestandaarden.nictiz.nl/wiki/vpk:V4.0_FHIR_eOverdracht#Using_Task_to_manage_the_workflow).
      type: string
      enum: [ requested, accepted, in-progress, completed, on-hold, cancelled ]
    TransferNegotiation:
      allOf:
        - $ref: '#/components/schemas/TransferNegotiationStatus'
        - type: object
          required:
            - id
            - transferID
            - organizationDID
            - organization
            - taskID
            - transferDate
          properties:
            id:
              $ref: '#/components/schemas/ObjectID'
            transferID:
              $ref: '#/components/schemas/ObjectID'
            organizationDID:
              description: Decentralized Identifier of the organization to which transfer of a patient is requested.
              type: string
            taskID:
              description: The id of the FHIR Task resource which tracks this negotiation.
              type: string
            organization:
              $ref: '#/components/schemas/Organization'
            transferDate:
              description: Transfer date subject of the negotiation. Can be altered by both sending and receiving care organization.
              type: string
              format: date
    TransferProperties:
      description: >
        Properties of a transfer. These values can be updated over time.
      required:
        - patient
        - transferDate
        - carePlan
      properties:
        carePlan:
          $ref: '#/components/schemas/EOverdrachtCarePlan'
        patient:
          $ref: '#/components/schemas/Patient'
        transferDate:
          description: Transfer date as proposed by the sending XIS. It is populated/updated by the last negotiation that was started.
          type: string
          format: date

    SharedCarePlan:
      properties:
        fhirCarePlan:
          description: >
            HL7 FHIR R4 CarePlan
          type: object
        fhirActivityTasks:
          description: >
            HL7 FHIR R4 Task resources that were resolved from CarePlan.activity.
            It's a map from Reference in the CarePlan to the Task resource.
          type: object
          additionalProperties:
            type: object
        participants:
          type: array
          items:
            $ref: '#/components/schemas/Organization'

    EOverdrachtCarePlan:
      description: >
        CarePlan as defined by https://decor.nictiz.nl/pub/eoverdracht/e-overdracht-html-20210510T093529/tr-2.16.840.1.113883.2.4.3.11.60.30.4.63-2021-01-27T000000.html#_2.16.840.1.113883.2.4.3.11.60.30.22.4.529_20210126000000
      required:
        - patientProblems
      properties:
        patientProblems:
          type: array
          items:
            $ref: '#/components/schemas/PatientProblem'

    PatientProblem:
      description: A problem as defined by https://decor.nictiz.nl/pub/eoverdracht/e-overdracht-html-20210510T093529/tr-2.16.840.1.113883.2.4.3.11.60.30.4.63-2021-01-27T000000.html#_2.16.840.1.113883.2.4.3.11.60.30.22.4.531_20210126000000
      required:
        - problem
        - interventions
      properties:
        problem:
          $ref: '#/components/schemas/Problem'
        interventions:
          type: array
          items:
            $ref: '#/components/schemas/Intervention'
    Problem:
      required:
        - name
        - status
        - comment
      properties:
        name:
          type: string
        status:
          type: string
          enum: [ active, inactive ]
    Intervention:
      required:
        - comment
      properties:
        comment:
          type: string

    Period:
      properties:
        start:
          type: string
          format: date
        end:
          type: string
          format: date

    CreateCollaborationRequest:
      description: >
        Request to create a collaboration.
      required:
        - sender
      properties:
        sender:
          $ref: '#/components/schemas/Organization'
    CreateEpisodeRequest:
      description: >
        Request to create a episode.
      required:
        - dossierID
        - diagnosis
        - period
      properties:
        dossierID:
          $ref: '#/components/schemas/ObjectID'
        diagnosis:
          type: string
        period:
          $ref: '#/components/schemas/Period'
    CreateCarePlanRequest:
      description: >
        Request to create a care plan
      required:
        - dossierID
        - title
      properties:
        dossierID:
          $ref: '#/components/schemas/ObjectID'
        title:
          type: string
    SharedCarePlanNotifyRequest:
      properties:
        carePlanURL:
          description: URL to the FHIR CarePlan resource that was updated.
          type: string
        patient:
          description: FHIR Patient related to the CarePlan
          type: object
        task:
          description: FHIR Task that was updated.
          type: object
    CreateCarePlanActivityRequest:
      description: >
        Request to create a care plan activity. The activity is to be fulfilled by the 'owner'.
      required:
        - code
        - owner
      properties:
        code:
          $ref: '#/components/schemas/FHIRCodeableConcept'
        owner:
          $ref: '#/components/schemas/FHIRIdentifier'
    FHIRCodeableConcept:
      description: >
        A codeable concept as defined by FHIR R4.
      required:
        - coding
      properties:
        coding:
          type: array
          items:
            type: object
    FHIRIdentifier:
      description: >
        A identifier as defined by FHIR R4.
      required:
        - system
        - value
      properties:
        system:
          type: string
        value:
          type: string



    Episode:
      description: >
        A episode is a group of care organizations that share a common care plan.
      required:
        - id
        - diagnosis
        - period
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        status:
          type: string
          enum:
            - planned
            - waitlist
            - active
            - onhold
            - finished
            - cancelled
            - entered-in-error
        diagnosis:
          type: string
        period:
          $ref: '#/components/schemas/Period'
    CreateTransferRequest:
      description: >
        Create a new transfer for a specific dossier with a date and description.
      allOf:
        - $ref: '#/components/schemas/TransferProperties'
        - type: object
          required:
            - dossierID
          properties:
            dossierID:
              $ref: '#/components/schemas/ObjectID'
    Transfer:
      description: >
        A dossier for transferring a patient to another care organization. It is composed of negotiations with specific care organizations.
        The patient can be transferred to one of the care organizations that accepted the transfer.
        TODO: proposing/handling alternative transfer dates is not supported yet.
      allOf:
        - $ref: '#/components/schemas/TransferProperties'
        - type: object
          required:
            - id
            - dossierID
            - status
            - fhirAdvanceNoticeComposition
          properties:
            id:
              $ref: '#/components/schemas/ObjectID'
            dossierID:
              $ref: '#/components/schemas/ObjectID'
            status:
              description: >
                Status of the transfer. If the state is "completed" or "cancelled" the transfer dossier becomes read-only.
                In that case no additional negotiations can be sent (for this transfer) or accepted. Possible values:
                - Created: the new transfer dossier is created, but no requests were sent (to receiving care organizations) yet.
                - Requested: one or more requests were sent to care organizations
                - Assigned: The transfer is assigned to one the receiving care organizations thet accepted the transfer.
                - Completed: the patient transfer is completed and marked as such by the receiving care organization.
                - Cancelled: the transfer is cancelled by the sending care organization.
              type: string
              enum: [ created, requested, assigned, completed, cancelled ]
            fhirAdvanceNoticeComposition:
              description: Reference to the FHIR composition resource that describes the advance notice, according to the Nictiz eOverdracht FHIR specification.
              type: string
            fhirNursingHandoffComposition:
              description: Reference to the FHIR composition resource that describes the nursing handoff, according to the Nictiz eOverdracht FHIR specification.
              type: string
    CreateDossierRequest:
      description: API request to create a dossier for a patient.
      required:
        - patientID
        - name
      properties:
        patientID:
          $ref: '#/components/schemas/ObjectID'
        name:
          type: string
    TransferRequest:
      description: Incoming request from another care organization to transfer a patient.
      required:
        - sender
        - status
        - advanceNotice
      properties:
        sender:
          $ref: '#/components/schemas/Organization'
        advanceNotice:
          $ref: '#/components/schemas/TransferProperties'
        nursingHandoff:
          $ref: '#/components/schemas/TransferProperties'
        transferDate:
          description: Requested transfer date.
          type: string
          format: date
        status:
          description: State of the transfer request. Maps to FHIR task state.
          type: string
    RemotePatientFile:
      description: A patient file from a remote XIS.
      required:
        - patient
        - observations
      properties:
        patient:
          $ref: '#/components/schemas/Patient'
        observations:
          description: List of FHIR Observation resources for the patient.
          type: array
          items:
            type: object
    Report:
      required:
        - id
        - patientID
        - type
        - value
        - source
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        patientID:
          $ref: '#/components/schemas/ObjectID'
        episodeID:
          $ref: '#/components/schemas/ObjectID'
        type:
          type: string
        value:
          type: string
        source:
          type: string
        episodeName:
          type: string
    Dossier:
      required:
        - id
        - patientID
        - name
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        patientID:
          $ref: '#/components/schemas/ObjectID'
        name:
          type: string
    InboxInfo:
      required:
        - messageCount
      properties:
        messageCount:
          description: Number of new messages in the inbox.
          type: integer
    InboxEntry:
      required:
        - title
        - status
        - sender
        - date
        - type
        - resourceID
        - requiresAttention
      properties:
        title:
          description: Descriptive title.
          type: string
        status:
          $ref: "#/components/schemas/TransferNegotiationStatus"
        sender:
          $ref: "#/components/schemas/Organization"
        date:
          description: Date/time of the entry.
          type: string
          format: datetime
        type:
          description: Type of the entry
          type: string
          enum:
            - transferRequest
        resourceID:
          description: ID that should be used when retrieving the source document of the inbox entry, e.g. a transfer request.
          type: string
        requiresAttention:
          description: If true, this inbox entry requires attention of an end user (e.g. data has been changed by a remote system).
          type: boolean

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: [ ] # Apply Bearer Auth to all endpoints

servers:
  - url: "./web"
