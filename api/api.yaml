openapi: "3.0.0"
info:
  title: "Nuts Demo EHR API"
  version: "1.0.0"

paths:
  /auth:
    post:
      operationId: setCustomer
      description: sets the current customer ID in the JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        '200':
          description: A session was succesfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionToken"
        '403':
          description: Invalid credentials

  # Password authentication
  /auth/passwd:
    post:
      description: Authenticate using password credential. If successful an authenticated session is created and returned.
      operationId: authenticateWithPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordAuthenticateRequest"
      responses:
        '204':
          description: Authentication successful.
        '403':
          description: Invalid credentials
  # IRMA authentication
  /auth/irma/session:
    post:
      operationId: authenticateWithIRMA
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IRMAAuthenticationRequest"
      responses:
        '200':
          description: A session was succesfully created
          content:
            application/json:
              schema:
                type: object
  /auth/irma/session/{sessionToken}/result:
    parameters:
      - name: sessionToken
        in: path
        description: IRMA session ID
        required: true
        schema:
          type: string
    get:
      operationId: getIRMAAuthenticationResult
      responses:
        '200':
          description: Session result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionToken"

  /private:
    get:
      description: Checks whether the current session is valid. If not, the client should authenticate before calling other API operations.
      operationId: checkSession
      responses:
        '204':
          description: The session is valid.
        '400':
          description: The session is invalid.

  /private/customer:
    get:
      operationId: getCustomer
      description: Get the information of the current customer based on the session
      responses:
        200:
          description: All the information of the current customer.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"

  /customers:
    get:
      operationId: listCustomers
      responses:
        200:
          description: returns a list of customers as configured in the customers.json file
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Customer"
  /private/patient/{patientID}:
    parameters:
      - name: patientID
        in: path
        description: The patient id
        required: true
        schema:
          type: string
    get:
      operationId: getPatient
      description: Get the patient by indicated by the patientID
      responses:
        200:
          description: The requested patient
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
    put:
      operationId: updatePatient
      description: Update the patient indicated by the patientID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatientProperties"
      responses:
        200:
          description: Update successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"

  /private/transfer:
    post:
      description: Create a new patient transfer dossier.
      operationId: createTransfer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransferRequest'
      responses:
        200:
          description: Transfer created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        404:
          description: Patient not found
        400:
          description: Invalid request.
    get:
      parameters:
        - name: patientID
          in: query
          description: The patient ID
          required: true
          schema:
            type: string
      description: Get all transfer dossiers for a patient
      operationId: getPatientTransfers
      responses:
        200:
          description: Transfer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        404:
          description: Transfer not found
  /private/transfer/{transferID}:
    parameters:
      - name: transferID
        in: path
        description: ID of the transfer dossier.
        required: true
        schema:
          type: string
    get:
      description: Get a transfer by ID.
      operationId: getTransfer
      responses:
        200:
          description: Transfer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        404:
          description: Transfer not found

  /private/transfer/{transferID}/negotiation:
    parameters:
      - name: transferID
        in: path
        description: ID of the transfer dossier.
        required: true
        schema:
          type: string
    get:
      description: Lists all negotiations for this transfer.
      operationId: listTransferNegotiations
      responses:
        200:
          description: Negotiation started.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransferNegotiation'
  /private/transfer/{transferID}/negotiation/{organizationDID}:
    parameters:
      - name: transferID
        in: path
        description: ID of the transfer dossier.
        required: true
        schema:
          type: string
      - name: organizationDID
        in: path
        description: ID of the transfer negotation.
        required: true
        schema:
          type: string
    post:
      description: >
        Start a negotiation with a care organization for this transfer.
        Calling this operation will update the state of the transfer to "requested".
      operationId: startTransferNegotiation
      responses:
        200:
          description: Negotiation started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferNegotiation'
        404:
          description: Patient or transfer not found
        400:
          description: Invalid request.
  /private/transfer/{transferID}/negotiation/{organizationDID}/assign:
    parameters:
      - name: transferID
        in: path
        description: ID of the transfer dossier.
        required: true
        schema:
          type: string
      - name: organizationDID
        in: path
        description: ID of the transfer negotation.
        required: true
        schema:
          type: string
    post:
      description: >
        Assign the transfer of a patient to a care organization that accepted the transfer negotiation.
        Calling this operation will update the state of the negotiation to "inProgress" and the transfer to "assigned".
      operationId: assignTransferNegotiation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptTransferRequest'
      responses:
        200:
          description: Transfer accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        404:
          description: Patient, transfer or negotiation not found
        400:
          description: Invalid request.

  /private/patients:
    get:
      operationId: getPatients
      responses:
        200:
          description: A list of patients for the current customer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Patient"
    post:
      operationId: newPatient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatientProperties"
      responses:
        200:
          description: Succesful creation of a new Patient
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"

  /private/network/organizations:
    get:
      description: Searches for care organizations on Nuts Network.
      operationId: searchOrganizations
      parameters:
        - name: query
          in: query
          description: Keyword for finding care organizations.
          required: true
          schema:
            type: string
        - name: didServiceType
          in: query
          description: >
            Filters care organizations on service, only returning care organizations have a service in their DID Document which' type matches the given didServiceType.
            If not supplied, care organizations aren't filtered on service.
          required: false
          schema:
            type: string
      responses:
        200:
          description: Search successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
  /private/dossier:
    parameters:
      - name: patientID
        in: query
        description: The patient ID
        required: true
        schema:
          type: string
    get:
      description: Get list of dossiers for a patient
      operationId: getDossier
      responses:
        200:
          description: The list of dossiers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Dossier"

components:
  schemas:
    Customer:
      type: object
      description: A customer object.
      required:
        - id
        - name
        - active
      properties:
        id:
          type: string
          description: The internal customer ID.
          example: "C12"
        did:
          type: string
          description: The customer DID.
          example:
            "did:nuts:123"
        name:
          type: string
          description: Internal name for this customer.
        city:
          type: string
          description: Locality for this customer.
        domain:
          type: string
          description: The email domain of the care providers employees, required for logging in.
        active:
          type: boolean
          description: If a VC has been issued for this customer.
    ObjectID:
      description: An internal object UUID which can be used as unique identifier for entities.
      type: string
      example:
        - 665d6390-4823-4829-a3bf-4257e0b6799
      pattern: "/^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i"
    Patient:
      allOf:
        - $ref: "#/components/schemas/ObjectID"
        - $ref: "#/components/schemas/PatientProperties"
    PatientProperties:
      type: object
      description: |
        A patient in the EHR system. Containing the basic information about the like name, adress, dob etc.
      required:
        - firstName
        - surname
        - gender
        - zipcode
      properties:
        ssn:
          description: Social security number
          type: string
          example: 99999880
        firstName:
          description: Given name
          type: string
          example: Jan
        surname:
          description: Family name. Must include prefixes like "van der".
          type: string
          example: van der Moolen
        gender:
          description: Gender of the person according to https://www.hl7.org/fhir/valueset-administrative-gender.html.
          type: string
          enum: [ male, female, other, unknown ]
          default: unknown
        dob:
          description: Date of birth.
          type: string
          format: date
          example: "1986-01-30"
        zipcode:
          description: The zipcode formatted in dutch form. Can be used to find local care providers.
          type: string
          example: 7511AB
        email:
          description: Primary email address.
          type: string
          format: email
    SessionToken:
      type: object
      description: Result of a signing session.
      required:
        - token
      properties:
        token:
          type: string
          description: the result from a signing session. It's an updated JWT.
    IRMAAuthenticationRequest:
      required:
        - customerID
      properties:
        customerID:
          description: Internal ID of the customer for which is being logged in
          type: string
          example: 1
    PasswordAuthenticateRequest:
      required:
        - customerID
        - password
      properties:
        customerID:
          description: Internal ID of the customer for which is being logged in
          type: string
          example: 1
        password:
          type: string
    Organization:
      description: A care organization available through the Nuts Network to exchange information.
      required:
        - name
        - city
        - did
      properties:
        name:
          description: Name of the care organization.
          type: string
        city:
          description: City where the care organization is located.
          type: string
        did:
          description: Decentralized Identifier which uniquely identifies the care organization on the Nuts Network.
          type: string
    TransferNegotiation:
      description: A negotiation with a specific care organization to transfer a patient.
      required:
        - id
        - organizationDID
        - status
        - transferDate
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        organizationDID:
          description: Decentralized Identifier of the organization to which transfer of a patient is requested.
          type: string
        status:
          description: Status of the negotiation, maps to FHIR eOverdracht task states (https://informatiestandaarden.nictiz.nl/wiki/vpk:V4.0_FHIR_eOverdracht#Using_Task_to_manage_the_workflow).
          type: string
          enum: [requested, accepted, in-progress, completed, on-hold]
        transferDate:
          description: Transfer date subject of the negotiation. Can be altered by both sending and receiving care organization.
          type: string
          format: date
    CreateTransferRequest:
      description: >
        Create a new transfer for a specific dossier with a date and description.
      required:
        - dossierID
        - transferDate
        - description
      properties:
        dossierID:
          $ref: '#/components/schemas/ObjectID'
        description:
          type: string
        transferDate:
          type: string
          format: date
    Transfer:
      description: >
        A dossier for transferring a patient to another care organization. It is composed of negotiations with specific care organizations.
        The patient can be transferred to one of the care organizations that accepted the transfer.
        TODO: proposing/handling alternative transfer dates is not supported yet.
      required:
        - id
        - status
        - description
        - transferDate
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        status:
          description: >
            Status of the transfer. If the state is "completed" or "cancelled" the transfer dossier becomes read-only.
            In that case no additional negotiations can be sent (for this transfer) or accepted. Possible values:
            - Created: the new transfer dossier is created, but no requests were sent (to receiving care organizations) yet.
            - Requested: one or more requests were sent to care organizations
            - Assigned: The transfer is assigned to one the receiving care organizations thet accepted the transfer.
            - Completed: the patient transfer is completed and marked as such by the receiving care organization.
            - Cancelled: the transfer is cancelled by the sending care organization.
          type: string
          enum: [created, requested, assigned, completed, cancelled]
        description:
          description: >
            Accompanying text sent to care organizations to assess the patient transfer. It is populated/updated by the last negotiation that was started.
          type: string
        transferDate:
          description: Transfer date as proposed by the sending XIS. It is populated/updated by the last negotiation that was started.
          type: string
          format: date
    AcceptTransferRequest:
      description: >
        API request to accept the transfer of a patient, to a care organization that accepted transfer.
        negotiationID contains the ID of the negotiation that will complete the transfer.
      required:
        - negotiationID
      properties:
        negotiationID:
          $ref: '#/components/schemas/ObjectID'
    Dossier:
      required:
        - id
        - patientID
        - name
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        patientID:
          $ref: '#/components/schemas/ObjectID'
        name:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: [] # Apply Bearer Auth to all endpoints

servers:
  - url: "/web"